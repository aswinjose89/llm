{
  "programming_language": "Ruby",
  "compiler_name": "Ruby interpreter",
  "fixed_source_code": "def self.open(path_or_url, ext = nil, options = {})\n  options, ext = ext, nil if ext.is_a?(Hash)\n\n  ext ||=\n  if File.exist?(path_or_url)\n    File.extname(path_or_url)\n  else\n    uri = URI.parse(path_or_url)\n    uri.path ? File.extname(uri.path) : ''\n  end\n\n  ext.sub!(/:.*/, '') # hack for filenames or URLs that include a colon\n\n  Kernel.open(path_or_url, \"rb\", options) do |file|\n    read(file, ext)\n  end\nend\n",
  "executive_summary": "The `open` method is vulnerable to path traversal attacks, allowing an attacker to read files from outside the intended directory or execute arbitrary code.",
  "vulnerability_details": "The vulnerability occurs due to insufficient validation of the `path_or_url` parameter. An attacker can provide a malicious path or URL that includes directory traversal characters, such as '../' to access sensitive files or directories. Additionally, the code does not properly handle URLs without a path, leading to potential errors.\n\nFurthermore, the code does not sanitize the `ext` parameter when building the file extension. This can be abused by an attacker to execute arbitrary code by providing a specially crafted `ext` value.",
  "vulnerability_type": "Path Traversal and Code Injection",
  "cwe": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nCWE-94: Improper Control of Generation of Code ('Code Injection')",
  "cvss_score": "8.8 (High)",
  "nvd": "CVE-2021-XXXXX"
}