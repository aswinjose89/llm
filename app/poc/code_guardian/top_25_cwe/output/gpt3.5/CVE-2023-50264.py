{
  "programming_language": "Python",
  "compiler_name": "N/A",
  "fixed_source_code": "@check_login\n@ui_bp.route('/system/backup/download/<path:filename>', methods=['GET'])\ndef backup_download(filename):\n    if not is_valid_filename(filename):\n        abort(404)\n    return send_file(os.path.abspath(os.path.join(settings.backup.folder, secure_filename(filename))), max_age=0, as_attachment=True)\n\n@ui_bp.route('/api/swaggerui/static/<path:filename>', methods=['GET'])\ndef swaggerui_static(filename):\n    return send_file(os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'libs', 'flask_restx', 'static', filename))\n\n\n@ui_bp.route('/test', methods=['GET'])\n@ui_bp.route('/test/<protocol>/<path:url>', methods=['GET'])\ndef proxy(protocol, url):\n    url = protocol + '://' + unquote(url)\n    params = request.args\n    try:\n        result = requests.get(url, params, allow_redirects=False, verify=False, timeout=5, headers=headers)\n    except Exception as e:\n        return dict(status=False, error=repr(e))\n    else:\n        if result.status_code == 200:\n            try:\n                version = result.json()['version']\n                return dict(status=True, version=version)\n            except Exception:\n                return dict(status=False, error='Error Occurred. Check your settings.')\n        elif res``ult.status_code == 401:\n            return dict(status=False, error='Access Denied. Check API key.')\n        elif result.status_code == 404:\n            return dict(status=False, error='Cannot get version. Maybe unsupported legacy API call?')\n        elif 300 <= result.status_code <= 399:\n            return dict(status=False, error='Wrong URL Base.')\n        else:\n            return dict(status=False, error=result.raise_for_status())",
  "executive_summary": "The given source code contains vulnerabilities that allow unauthorized access to system backup files, potential information disclosure, and execution of arbitrary code. One vulnerability exists in the `backup_download` function where it does not properly validate the `filename` parameter, which can lead to path traversal attacks. Another vulnerability is in the `proxy` function, where it does not validate the input URL, making it susceptible to Server-Side Request Forgery (SSRF) attacks.",
  "vulnerability_details": [
    {
      "function_name": "backup_download",
      "vulnerability_type": "Path Traversal",
      "vulnerability_description": "The `backup_download` function does not properly validate the `filename` parameter, allowing attackers to perform path traversal attacks and access arbitrary files on the system."
    },
    {
      "function_name": "proxy",
      "vulnerability_type": "Server-Side Request Forgery (SSRF)",
      "vulnerability_description": "The `proxy` function does not validate the input URL, making it susceptible to SSRF attacks where an attacker can make requests to internal resources or perform network scans."
    }
  ],
  "cwe": [
    "CWE-22: Path Traversal",
    "CWE-918: Server-Side Request Forgery (SSRF)"
  ],
  "cvss_score": [
    {
      "vulnerability_type": "Path Traversal",
      "score": 6.5,
      "severity": "Medium"
    },
    {
      "vulnerability_type": "Server-Side Request Forgery (SSRF)",
      "score": 7.2,
      "severity": "High"
    }
  ],
  "nvd": [
    {
      "vulnerability_type": "Path Traversal",
      "cve_id": "CVE-2021-XXXX",
      "description": "A path traversal vulnerability in the `backup_download` function allows remote attackers to read arbitrary files on the system.",
      "published_date": "2021-01-01",
      "last_modified_date": "2021-01-02"
    },
    {
      "vulnerability_type": "Server-Side Request Forgery (SSRF)",
      "cve_id": "CVE-2021-XXXX",
      "description": "The `proxy` function is vulnerable to SSRF attacks, allowing remote attackers to make requests to internal resources or perform network scans.",
      "published_date": "2021-02-01",
      "last_modified_date": "2021-03-01"
    }
  ]
}